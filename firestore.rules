rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Global functions
    function isAuth(request) {
      return request.auth != null
    }
    function isUsersObject(request, uid) {
      return request.auth.uid == uid
    }
    function hasUserObj(uid) {
      return exists(/databases/$(database)/documents/users/$(uid))
    }

    // Users
    match /users/{uid} {
      allow create: if
        isAuth(request) &&
        isUsersObject(request, uid) &&
        !hasUserObj(request.auth.uid) &&
        !request.resource.data.keys().hasAny(["connectedUser"]) &&
        request.resource.data.keys().hasAll(["email", "uid"]) &&
        request.auth.uid == request.resource.data.uid &&
        request.auth.token.email == request.resource.data.email
      allow read: if
        isAuth(request)
      allow update: if
        isAuth(request) &&
        isUsersObject(request, uid) &&
        !request.resource.data.keys().hasAny(["connectedUser"])
      allow delete: if
        false
    }

    // Private user data
    match /users/{uid}/private/{privateDoc=**} {
      allow read, write: if
        isAuth(request) &&
        isUsersObject(request, uid)
    }

    // Movie reactions
    match /movieReactions/{id} {
      function isOwner(request, resource) {
        return request.auth.uid == resource.data.owner
      }
      allow create: if
        isAuth(request) &&
        hasUserObj(request.auth.uid) &&
        isOwner(request, request.resource) &&
        request.resource.data.keys().hasOnly(["movieId", "owner", "reaction"]) &&
        (
          request.resource.data.reaction == "LIKE" ||
          request.resource.data.reaction == "DISLIKE"
        )
      allow read: if
        isAuth(request) &&
        (
          isOwner(request, resource) ||
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.connectedUser == resource.data.owner
        )
      allow update: if
        isAuth(request) &&
        isOwner(request, resource) &&
        isOwner(request, request.resource) &&
        request.resource.data.createdAt == resource.data.createdAt &&
        request.resource.data.keys().hasOnly(["movieId", "owner", "reaction"]) &&
        (
          request.resource.data.reaction == "LIKE" ||
          request.resource.data.reaction == "DISLIKE"
        )
      allow delete: if
        isAuth(request) &&
        isOwner(request, resource)
    }

    // Connection requests
    match /connectionRequests/{uid} {

      // Connection request specific functions
      function isSender(request, resource) {
        return request.auth.uid == resource.data.sender
      }
      function isReceiver(request, resource) {
        return request.auth.uid == resource.data.receiver
      }
      function checkSender(request) {
        let sender = get(/databases/$(database)/documents/users/$(request.resource.data.sender));
        return (
          exists(/databases/$(database)/documents/users/$(request.resource.data.sender)) &&
          sender != null &&
          (!sender.data.keys().hasAny(["connectedUser"]) || sender.data.connectedUser != request.resource.data.receiver)
        )
      }
      function checkFields(request) {
        return request.resource.data.keys().hasOnly(["sender", "receiver", "status"])
      }

      allow create: if
        isAuth(request) &&
        checkFields(request) &&
        request.resource.data.status == "PENDING" &&
        !isReceiver(request, request.resource) &&
        isSender(request, request.resource) &&
        hasUserObj(request.resource.data.receiver) &&
        hasUserObj(request.resource.data.sender) &&
        checkSender(request)
      allow read: if
        isAuth(request) &&
        (
          isReceiver(request, resource) ||
          isSender(request, resource)
        )
      allow update: if
        isAuth(request) &&
        isReceiver(request, resource) &&
        checkFields(request) &&
        request.resource.data.status == "ACCEPTED" &&
        request.resource.data.receiver == resource.data.receiver &&
        request.resource.data.sender == resource.data.sender
      allow delete: if
        isAuth(request) &&
        (
          isReceiver(request, resource) ||
          isSender(request, resource)
        )
    }

    // Movies
    match /movies/{movie=**} {
      allow write: if
        false
      allow read: if
        isAuth(request)
    }

    // Genres
    // TODO: Implement or discard
    match /genres/{genre=**} {
      allow read, write: if
        false
    }

    // Regions
    // TODO: Implement or discard
    match /regions/{region=**} {
      allow read, write: if
        false
    }
  }
}