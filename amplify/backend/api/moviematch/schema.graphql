# Lamdba Functions

type Query {
  # TODO: https://github.com/aws-amplify/amplify-cli/issues/5151
  # discoverMovies: DiscoverMovieApi @http(url: "https://api.themoviedb.org/3/discover/movie?api_key=0dd0cb2ac703e890ab3573c95612498a")
  discoverMovies(input: DiscoverMoviesInput): QueryMovieList
    @function(name: "movieMatchLambdaFunction-${env}")
    @auth(
      rules: [
        { allow: private, provider: iam }
        { allow: private, provider: userPools }
      ]
    )
  getApiMovie(input: GetApiMoviesInput): MovieApiOutput
    @function(name: "movieMatchLambdaFunction-${env}")
    @auth(
      rules: [
        { allow: private, provider: iam }
        { allow: private, provider: userPools }
      ]
    )
  findMovieMatches: FindMovieMatchesList
    @function(name: "movieMatchLambdaFunction-${env}")
    @auth(
      rules: [
        { allow: private, provider: iam }
        { allow: private, provider: userPools }
      ]
    )
  listPartnerPendingMovieMatches: QueryMovieList
    @function(name: "movieMatchLambdaFunction-${env}")
    @auth(
      rules: [
        { allow: private, provider: iam }
        { allow: private, provider: userPools }
      ]
    )
}

type Mutation {
  acceptRequest(input: AcceptRequestInput!): AcceptRequestOutput
    @function(name: "movieMatchLambdaFunction-${env}")
    @auth(
      rules: [
        { allow: private, provider: iam }
        { allow: private, provider: userPools }
      ]
    )
}

# Models

type User
  @model(subscriptions: { level: off })
  @auth(
    rules: [
      { allow: owner, operations: [create, read, update] }
      { allow: private, provider: iam, operations: [read, update] }
    ]
  ) {
  id: ID! @primaryKey
  sub: ID!
  email: String!
  requests: [ConnectionRequest!] @hasMany
  movieReactions: [MovieReaction!] @hasMany
  movieMatches: [ID!]
  searchOptions: SearchOptions
  connectedUser: String
    @auth(
      rules: [
        { allow: owner, operations: [read] }
        # Only allow the lambda function to update this field
        { allow: private, provider: iam, operations: [read, update] }
      ]
    )
}

type ConnectionRequest
  @model
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "sender"
        operations: [create, read, update, delete]
      }
      {
        allow: owner
        ownerField: "receiver"
        operations: [read, update, delete]
      }
      { allow: private, provider: iam, operations: [read, update, delete] }
    ]
  ) {
  id: ID! @primaryKey
  sender: ID!
  receiver: ID!
  status: ConnectionRequestStatus!
}

type Movie
  @model
  @auth(
    rules: [
      { allow: owner, operations: [create] }
      { allow: private, provider: iam }
      { allow: private, provider: userPools, operations: [read] }
    ]
  ) {
  id: ID! @primaryKey
  identifier: Int! @index(name: "byIdentifier", queryField: "movieByIdentifier")
  createdAt: AWSDateTime!
  name: String!
  coverUri: String
  rating: Float
  ratingCount: Int
  description: String!
  genres: [Genre!]!
  trailerUri: String
}

type MovieReaction
  @model
  @auth(rules: [{ allow: owner }, { allow: private, provider: iam }]) {
  id: ID! @primaryKey
  movie: Movie! @hasOne
  createdAt: AWSDateTime!
  reaction: Reaction!
}

# Types

type FindMovieMatchesList {
  allMatches: [Movie!]!
  newMatches: [Movie!]!
}

type QueryMovieList {
  items: [Movie!]!
}

type MovieApiOutput {
  id: Int!
  poster_path: String
  adult: Boolean!
  overview: String!
  release_date: String!
  genre_ids: [Int!]!
  original_title: String!
  original_language: String!
  title: String!
  backdrop_path: String
  popularity: Float!
  vote_count: Int!
  video: Boolean!
  vote_average: Float!
}

type SearchOptions {
  region: Region
  includeAdult: Boolean
  releasedAfterYear: Int
  genres: [Genre]
}

type AcceptRequestOutput {
  status: Boolean!
  message: String
}

# Inputs

input GetApiMoviesInput {
  id: Int!
}

input AcceptRequestInput {
  requestId: ID!
}

input DiscoverMoviesInput {
  page: Int
  region: Region
  includeAdult: Boolean
  releasedAfterYear: Int
  genres: [Genre]
}

# Enums

enum ConnectionRequestStatus {
  PENDING
  ACCEPTED
}

enum Reaction {
  LIKE
  DISLIKE
}

enum Region {
  US
  GB
  DE
  CN
  JP
  FR
  IN
  PL
}

enum Genre {
  Action
  Adventure
  Animation
  Comedy
  Crime
  Documentary
  Drama
  Family
  Fantasy
  History
  Horror
  Music
  Mystery
  Romance
  Fiction
  Movie
  Thriller
  War
  Western
}
